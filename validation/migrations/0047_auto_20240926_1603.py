# Generated by Django 4.2.15 on 2024-09-26 22:03

from django.db import migrations


def migrate_semantic_domains(apps, schema_editor):
    RW = "rapidwords"
    Phrase = apps.get_model("validation", "Phrase")
    SemanticClass = apps.get_model("validation", "SemanticClass")
    SemanticClassAnnotation = apps.get_model("validation", "SemanticClassAnnotation")
    SemanticClassOldAnnotation = apps.get_model(
        "validation", "SemanticClassOldAnnotation"
    )
    count_annotations = 0
    print(
        f"Generating objects for {SemanticClassOldAnnotation.objects.all().count()} annotation objects..."
    )
    for old_annotation in SemanticClassOldAnnotation.objects.all():
        # If the annotation is not rapid words, just transfer it.
        if old_annotation.origin != RW:
            sc = SemanticClass.get_or_create(
                collection=old_annotation.origin,
                classification=old_annotation.classification,
            )
            for phrase in old_annotation.phrase_set.all():
                annotation = SemanticClassAnnotation(
                    phrase=phrase, semantic_class=sc, source=old_annotation.source
                )
                annotation.save()
                count_annotations += 1
            continue
        # We have a rapid words annotation!  We will want to find all the tags that correctly match.
        classifications = [
            x + " "
            for x in old_annotation.classification.split()
            if len(x) > 0 and x[0].isdigit()
        ]
        for candidate in classifications:
            try:
                sc = SemanticClass.objects.filter(
                    collection=RW, classification__startswith=candidate
                ).get()
            except SemanticClass.MultipleObjectsReturned:
                print(f"Warning: Multiple candidates for classification of {candidate}")
                continue
            except SemanticClass.DoesNotExist:
                # This is expected in few cases: At least there is a copyright year somewhere.
                print(f"Warning: Couldn't find a Semantic Class for {candidate}!")
                continue
            for phrase in old_annotation.phrase_set.all():
                annotation = SemanticClassAnnotation(
                    phrase=phrase, semantic_class=sc, source=old_annotation.source
                )
                annotation.save()
                count_annotations += 1
    print(f"Generated {count_annotations} semantic annotations.")


class Migration(migrations.Migration):

    dependencies = [
        ("validation", "0046_semanticclassannotation_and_more"),
    ]

    operations = [migrations.RunPython(migrate_semantic_domains)]
